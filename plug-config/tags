!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/f66acf79/
$FZF_DEFAULT_COMMAND	fzf.vim	/^let $FZF_DEFAULT_COMMAND="rg --files --hidden"$/;"	v
$FZF_DEFAULT_OPTS	fzf.vim	/^let $FZF_DEFAULT_OPTS = '--layout=reverse --info=inline'$/;"	v
<C-f>	fzf.vim	/^map <C-f> :Files<CR>$/;"	m
<S-TAB>	coc.vim	/^inoremap <expr><S-TAB> pumvisible() ? "\\<C-p>" : "\\<C-h>"$/;"	m
<TAB>	coc.vim	/^inoremap <silent><expr> <TAB>$/;"	m
<c-space>	coc.vim	/^inoremap <silent><expr> <c-space> coc#refresh()$/;"	m
<cr>	coc.vim	/^  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\\<C-y>" : "\\<C-g>u\\<CR>"$/;"	m
<cr>	coc.vim	/^  inoremap <expr> <cr> pumvisible() ? "\\<C-y>" : "\\<C-g>u\\<CR>"$/;"	m
<leader>a	coc.vim	/^nmap <leader>a  <Plug>(coc-codeaction-selected)$/;"	m
<leader>a	coc.vim	/^xmap <leader>a  <Plug>(coc-codeaction-selected)$/;"	m
<leader>ac	coc.vim	/^nmap <leader>ac  <Plug>(coc-codeaction)$/;"	m
<leader>b	fzf.vim	/^map <leader>b :Buffers<CR>$/;"	m
<leader>f	coc.vim	/^nmap <leader>f  <Plug>(coc-format-selected)$/;"	m
<leader>f	coc.vim	/^xmap <leader>f  <Plug>(coc-format-selected)$/;"	m
<leader>g	fzf.vim	/^nnoremap <leader>g :Rg<CR>$/;"	m
<leader>m	fzf.vim	/^nnoremap <leader>m :Marks<CR>$/;"	m
<leader>qf	coc.vim	/^nmap <leader>qf  <Plug>(coc-fix-current)$/;"	m
<leader>rn	coc.vim	/^nmap <leader>rn <Plug>(coc-rename)$/;"	m
<leader>t	fzf.vim	/^nnoremap <leader>t :Tags<CR>$/;"	m
<space>a	coc.vim	/^nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>$/;"	m
<space>c	coc.vim	/^nnoremap <silent> <space>c  :<C-u>CocList commands<cr>$/;"	m
<space>e	coc.vim	/^nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>$/;"	m
<space>j	coc.vim	/^nnoremap <silent> <space>j  :<C-u>CocNext<CR>$/;"	m
<space>k	coc.vim	/^nnoremap <silent> <space>k  :<C-u>CocPrev<CR>$/;"	m
<space>o	coc.vim	/^nnoremap <silent> <space>o  :<C-u>CocList outline<cr>$/;"	m
<space>p	coc.vim	/^nnoremap <silent> <space>p  :<C-u>CocListResume<CR>$/;"	m
<space>s	coc.vim	/^nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>$/;"	m
Files	fzf.vim	/^command! -bang -nargs=? -complete=dir Files$/;"	c
Fold	coc.vim	/^command! -nargs=? Fold :call     CocAction('fold', <f-args>)$/;"	c
Format	coc.vim	/^command! -nargs=0 Format :call CocAction('format')$/;"	c
GGrep	fzf.vim	/^command! -bang -nargs=* GGrep$/;"	c
K	coc.vim	/^nnoremap <silent> K :call <SID>show_documentation()<CR>$/;"	m
OR	coc.vim	/^command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')$/;"	c
RG	fzf.vim	/^command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)$/;"	c
Rg	fzf.vim	/^command! -bang -nargs=* Rg$/;"	c
RipgrepFzf	fzf.vim	/^function! RipgrepFzf(query, fullscreen)$/;"	f
[g	coc.vim	/^nmap <silent> [g <Plug>(coc-diagnostic-prev)$/;"	m
]g	coc.vim	/^nmap <silent> ]g <Plug>(coc-diagnostic-next)$/;"	m
af	coc.vim	/^omap af <Plug>(coc-funcobj-a)$/;"	m
af	coc.vim	/^xmap af <Plug>(coc-funcobj-a)$/;"	m
g:UltiSnipsEditSplit	UltiSnips.vim	/^let g:UltiSnipsEditSplit="vertical"$/;"	v
g:UltiSnipsExpandTrigger	UltiSnips.vim	/^let g:UltiSnipsExpandTrigger="<tab>"$/;"	v
g:UltiSnipsJumpBackwardTrigger	UltiSnips.vim	/^let g:UltiSnipsJumpBackwardTrigger="<c-z>"$/;"	v
g:UltiSnipsJumpForwardTrigger	UltiSnips.vim	/^let g:UltiSnipsJumpForwardTrigger="<c-b>"$/;"	v
g:fzf_action	fzf.vim	/^let g:fzf_action = {$/;"	v
g:fzf_colors	fzf.vim	/^let g:fzf_colors =$/;"	v
g:fzf_history_dir	fzf.vim	/^let g:fzf_history_dir = '~\/.local\/share\/fzf-history'$/;"	v
g:fzf_layout	fzf.vim	/^let g:fzf_layout = {'up':'~90%', 'window': { 'width': 0.4, 'height': 0.4,'yoffset':0.5,'xoffset'/;"	v
g:fzf_tags_command	fzf.vim	/^let g:fzf_tags_command = 'ctags -R'$/;"	v
gd	coc.vim	/^nmap <silent> gd <Plug>(coc-definition)$/;"	m
gi	coc.vim	/^nmap <silent> gi <Plug>(coc-implementation)$/;"	m
gr	coc.vim	/^nmap <silent> gr <Plug>(coc-references)$/;"	m
gy	coc.vim	/^nmap <silent> gy <Plug>(coc-type-definition)$/;"	m
if	coc.vim	/^omap if <Plug>(coc-funcobj-i)$/;"	m
if	coc.vim	/^xmap if <Plug>(coc-funcobj-i)$/;"	m
mygroup	coc.vim	/^augroup mygroup$/;"	a
s:check_back_space	coc.vim	/^function! s:check_back_space() abort$/;"	f
s:show_documentation	coc.vim	/^function! s:show_documentation()$/;"	f
